#!/bin/bash

# This script cleans up remote-tracking branches, ensuring that only the branches
# being tracked locally are present in the remote-tracking branches list.

for remote in $(git remote); do
    echo "Processing remote: $remote"

    # Get a list of all local branches
    local_branches=$(git for-each-ref --format '%(refname:short)' refs/heads/)

    # Initialize tracked_branches to empty
    tracked_branches=""

    # For each local branch, get its upstream and filter those tracking the current remote
    for local_branch in $local_branches; do
        upstream=$(git for-each-ref --format '%(upstream:short)' refs/heads/$local_branch)
        if [[ $upstream == $remote/* ]]; then
            tracked_branches="$tracked_branches $upstream"
        fi
    done

    echo "Tracked branches: $tracked_branches"
    
    # Ask user if they want to delete all without confirmation for each branch
    echo "Do you want to delete all untracked remote branches for $remote without confirmation for each one? (y/n)"
    read delete_all_answer

    # Iterate over each remote branch for this remote
    for branch in $(git for-each-ref --format '%(refname:short)' refs/remotes/$remote/); do
        # If the branch isn't in the list of tracked branches, delete it
        if ! echo "$tracked_branches" | grep -q "^$branch$"; then
            if [ "$delete_all_answer" = "y" ]; then
                git branch -dr $branch
            else
                echo "$branch is not tracked locally. Do you want to delete it? (y/n)"
                read individual_answer
                if [ "$individual_answer" = "y" ]; then
                    git branch -dr $branch
                    echo "$branch has been deleted."
                else
                    echo "Skipping $branch..."
                fi
            fi
        fi
    done

    echo "Done with $remote."
    echo "-----------------------"
done

echo "Completed cleanup for all remotes."
